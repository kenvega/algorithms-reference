reference book
  grokking algorithms - Aditya Y. Bhargava

algorithm
  instructions to accomplish a task

logarithms
  2^3 = 8     --> log2(8) = 3
  2^4 = 16    --> log2(16) = 4
  10^2 = 100  --> log10(100) = 2
  10^3 = 1000 --> log10(1000) = 3

big O notation

  tells you how fast an algorithm is

  it refers to the worst case scenario

  when doing this notation "log" will always mean "log2"
    example
      log 8 == 3, because 2^3 == 8
      log 1024 = 10, because 2^10 == 1024

  examples ordered from fastest to slowest

    O(log n) -> log time. e.g. binary search

    O(n) -> linear time. e.g. simple search

    O(n * log n) -> e.g. a fast sorting algorithm (like quicksort)

    O(n^2) -> e.g. a slow sorting algorithm (like selection sort)

    O(n!) -> e.g a really slow algorithm  (like the traveling salesperson)